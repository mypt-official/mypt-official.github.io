---
layout: post
title:  "Memory&Type"
categories: Swift
---

# Memory

운영체제가 프로그램을 실행될때
프로그램이 사용할 메모리 영역을 할당함

- code 
	- 기계어로 번역된 프로그램 코드 저장

- data 
	- 정적변수, 전역변수 저장
	- 프로그램이 종료되면 함께 제거됨

- heap 
	- 동적으로 할당된 데이터를 저장
	- 다른영역은 할당할 공간의 크기를 예측할수있지만
	- 힙에는 동적으로 할당되는 특징때문에 예측불가능
	- 힙에 저장된 데이터는 생성시점, 제거시점이 정해져있지않음
	- 직접 코드를통해 생성, 제거를 해줘야함
	- 더이상 필요하지 않은 데이터를 제거하지 않으면 memory leaks (메모리 누수)가 발생한다

- stack  
	- 지역변수 파라미터 리턴값등 저장
	- 함수가 호출되면 stack frame이라는 공간을 만들어
	- 함수에서 사용되는 모든값을 저장함 
	- 함수의 실행이 종료되면 스택에서 제거됨
	- LIFO(Last In First Out) 후입선출  <-> FIFO(First In First Out) 선입선출 (Queue)

## Types

- Value Type은 stack 에 데이터를 저장하고 더이상 사용되지 않는경우 자동으로 제거되기 때문에 메모리 관리가 쉽다

- Reference Type은 실제값을 힙에 저장, 힙메모리 주소를 스택에 저장하고 실제값에 접근할때 스택에 있는 주소를 통해 접근

> 값형식(value type)은 항상 stack 에 저장됨 
> 값을 전달할때마다 새로운 복사본이 생성됨
```Swift
struct SizeValue {
	var width = 0.0
	var height = 0.0
}

var value = SizeValue() 

var value2 = value
value2.width = 1.0
value2.height = 2.0

print(value) // width = 0, height = 0
print(value2) // width = 1, heght = 2
```


> 참조형식(Reference Type)은 heap 에 인스턴스를 저장하고 stack에 메모리 주소를 저장한다
> 값을 전달할때 메모리 주소를 복사한다

> 동일한 주소로 값에 접근하기 떄문에 어떤 변수로 속성을 바꾸더라고 항상 동일한 인스턴스의 속성을 바꾼다

```Swift 
class SizeObject {
	var width = 0.0
	var height = 0.0
}

var object = SizeObject()

var object2 = object

object.width = 1.0
object.height = 2.0

print(object) // width = 1, height = 2
print(object2) // width = 1, height = 2
 ```

