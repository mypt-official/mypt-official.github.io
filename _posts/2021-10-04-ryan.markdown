---
layout: post
title:  "백엔드에 대한 회고"
date:   2021-10-04 10:46:00 +0900
categories: [프로그래밍]
---

* * *
최근 새로운 웹 프레임워크인 NestJs를 알아보면서 마이피티 백엔드에 대한 회고를 바탕으로 작성한 글입니다.
* * *
<br/>

## 1. 마이피티 백엔드 현재 상태
> javascript의 NodeJs라는 서버 프레임워크로 express 웹 프레임워크를 이용해 개발되어 있음 

## 2. expressJs vs NestJs
- expressJs의 경우 자율성이 높음
- NestJs는 규칙성이 매우 높음
- 간단하게 정리하자면 자율성이 높아서 마음대로 개발할수 있는 expressJs는 그만큼 제대로 개발하지 않으면 서버의 구조가 복잡해질 수 있고, NestJs 같은 경우는 프레임워크의 규칙성에 따라 개발하면 좋은 구조도를 가질 수 있으나 프레임워크를 사용하기 위한 러닝커브가 존재하며 아직 오래된 프레임워크가 아니라서 확장성 또는 문서 부재에 대한 고민이 있을 수 있다. 

## 3. javascript vs typescript
- 결론적으로 Javascript는 비교적 작은 프로젝트에 적합하고, Typescript는 대규모 프로젝트에 적합
- Typescript는 객체지향 언어이므로 코드 재사용, 단순, 깨끗, 일관성 등 다양한 장점을 가짐
- 다만 코드 작성시 타입에 대해 결정해아하기 때문에 번거롭고 코드량이 증가하며, 컴파일 시간이 오래걸린다. 

## 4. 함수형 프로그래밍 vs 객체지향 프로그래밍
- 함수형 프로그래밍의 장점: 사이드 이펙트가 없으며, 간결함
- 함수형 프로그래밍의 단점: 상태가 없음
- 객체지향 프로그래밍의 장점: 코드 재사용이 용이하며, 유지보수가 쉽고 확장성이 좋음
- 객체지향 프로그래밍의 단점: 개발속도가 느리며, 실행속도가 느림




