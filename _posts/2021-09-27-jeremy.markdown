layout: post
title:  "Optional"

# Optionals

> ? → Optional type 으로 만듬  
type anotation → 타입 지정    
objc nil → 존재하지 않는 객체에 대한 포인터  
swift nil → 포인터x 참조, 값 둘다 사용가능  
TypeName → Non-optionalType  
TypeName? → OptionalType

```swift
let optionalNum: Int? = nil
let str: String = "Swift"
//let str: String = nil //error
let optionalStr: String? = nil 
let a: Int? = nil
let b = a // b = Int? (nil)
```

## Unwrapping

> optional값은 값이 포장되어있기 때문에 값을 사용하려면 꺼내야함 → unwrapping

```swift
var num: Int? = nil
print(num) //nil

num = 123
print(num) //Optional(123)

let n = 12 
print(n) //123
```

- Forced Unwrapping(강제 추출)

```swift
print(num!) //123
num = nil
print(num!) //error 값이 없는데 강제추출을 하게되면 error
if num != nil {
	print(num!) 
}

num = 123
let before = num // optional
let after = num! // nonOptional
```

- Optional Binding

> 강제추출로 생기는 에러를 피할수있다

```swift
//Syntax
if let name: type = OptionalExpression {
	statements
}
while let name: type = OptionalExpression {
	statements
}
guard let name: type = OptionalExpression else {
	statements
}

var num: Int? = nil

if num != nil { // condition
	print(num!)
}else {
	print("empty")
}

if let num = num { // binding
	 print(num) // num! -> nonOptionalType 이므로 error
}else {
	print("empty")
}

var str: String? = "str"
guard let str = str else {
	//str -> compileError guard문 에서는 else블럭 안에 binding된 상수를 사용할수 없다
	fatalError()
}
str

num = 123
if var num = num {
	num = 456
	print(num) // 456
}

let a: Int? = 12
let b: String? = "str"

if let num = a, let str = b, str.count > 5 {// binding과 condition은 혼용가능
		print("num")
}
```

- IUO(Implicitly Unwrapped Optionals) - 암시적(자동)으로 추출되는 옵셔널

> swift4.2이전부터는 IUO를 optional과 별도의 형식으로 처리했지만
최신버전에서는 optinal과 같은 형식으로 처리됨  
optional이지만 특정 조건에서 자동 추출됨   
실제로 자주 사용되지는 않음   
자료형 이름뒤에 느낌표가붙어있는 형태   
처리해야할 자료형을 직접 지정하면 자동으로 언래핑됨

>> outlet 연결시 , api 에서 iuo를 return 할때   
>> → 두가지 경우 모두 optional 처리하면됨

```swift
// Type! -> IUO
let num: Int! = 12

let a = num 
a // Int? 

let b: Int = num
b // Int
```

```swift
let num: Int! = nil

let a = num 
a // Int? 

let b: Int = num // error
b 
```

- Nil-Coalescing Operator

> 2항연산자 (피연산자가 2개)   
오른쪽 피연산자는 왼쪽 피연산자의 값을 리턴하지 않는경우에만 평가된다   
따라서 오른쪽 피연산자에는 sideEffect 가 발생하지 않는코드를 넣어야한다

```swift

var msg = ""
var input: String? = "Swift"

if let inputName= input {
	msg = "Hello, " + inputName
} else {
	msg = "Hello, Stranger"
}
print(msg) // Hello, Swift

var str = "Hello, " + (input != nil? input! : "Stranger")
print(str) // Hello, Swift
```

```Swift
/* Syntax
	a ?? b
	OptionalExpression ?? Expression */

str = "Hello, " + (input ?? "Stranger")
print(str) // Hello, Swift
```

- Optional Pattern

> 열거형 패턴(enumeration)   
optionalPattern 은 enumerationPattern 의 optional 버전

```swift
public enum Optional<Wrapped> : ExpressibleByNilLiteral {
	case none
	case some(Wrapped)
	public init(_ some: Wrapped)
}
```

```swift

let a: Int? = 0 // 단축문법
let b: Optional<Int> = 0 

if a == nil { // 단축문법
}
if a == .none {
}

if a == 0 { // 단축문법
}
if a == .some(0) {
}

if let x = a { // 단축문법
	print(x) // 0
}
if case .some(let x) = a {
	print(x) // 0
}
```

```Swift
if case let x? = a {
	print(x) // 0  x -> Int
}

let ilst: [Int?] = [0, nil, nil, 3, nil, 5]
//반복문으로 nil은 제거하고 숫자만 출력해야함

for item in list {
	guard let x = item else { continue }
	print(x) // 0, 3, 5
}

for case let x? in list { //바인딩 성공시 출력, 실패시 반복코드 실행
	print(x) // 0, 3, 5 
}
```
